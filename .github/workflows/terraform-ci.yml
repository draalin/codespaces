name: Terraform CI

on:
  pull_request:
    paths:
      - 'infrastructure/**.tf'
      - '.pre-commit-config.yaml'
      - '.github/workflows/terraform-ci.yml'
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**.tf'
      - '.pre-commit-config.yaml'
  workflow_dispatch:
    inputs:
      state_bucket:
        description: "State bucket name"
        required: true
      lock_table:
        description: "DynamoDB lock table"
        required: true

jobs:
  validate:
    name: fmt / validate / lint / docs / cost (dry) (${{ matrix.env }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: [dev, prod]
    env:
      TF_PLUGIN_CACHE_DIR: .terraform.d/plugin-cache
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: .terraform.d/plugin-cache
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Install tools (tflint, infracost, terraform-docs)
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          curl -fsSL https://github.com/terraform-docs/terraform-docs/releases/download/v0.19.0/terraform-docs-v0.19.0-linux-amd64.tar.gz -o td.tgz
          tar -xzf td.tgz terraform-docs && sudo mv terraform-docs /usr/local/bin/ && rm td.tgz
          curl -fsSL https://github.com/infracost/infracost/releases/download/v0.10.42/infracost-linux-amd64.tar.gz -o ic.tgz
          tar -xzf ic.tgz && sudo mv infracost-linux-amd64/infracost /usr/local/bin/ && rm -rf ic.tgz infracost-linux-amd64
          curl -fsSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install-linux.sh | bash
          pip install --no-cache-dir checkov

      - name: Pre-commit (fmt/validate/tflint/docs)
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: '--show-diff-on-failure --color=always'

      - name: Terraform init (${{ matrix.env }})
        working-directory: infrastructure/env/${{ matrix.env }}
        run: terraform init -backend=false

      - name: Terraform validate (${{ matrix.env }})
        working-directory: infrastructure/env/${{ matrix.env }}
        run: terraform validate

      - name: TFLint (${{ matrix.env }})
        working-directory: infrastructure/env/${{ matrix.env }}
        run: tflint --enable-rule=terraform_unused_declarations || true

      - name: tfsec (${{ matrix.env }})
        working-directory: infrastructure/env/${{ matrix.env }}
        run: tfsec --minimum-severity=medium .

      - name: Checkov (${{ matrix.env }})
        working-directory: infrastructure/env/${{ matrix.env }}
        run: checkov -d . --quiet --framework terraform --severity-level MEDIUM,HIGH,CRITICAL

      - name: Docs check (${{ matrix.env }})
        working-directory: infrastructure/env/${{ matrix.env }}
        run: terraform-docs markdown table . >/dev/null 2>&1 || true

      - name: Infracost breakdown (dry)
        if: env.INFRACOST_API_KEY != ''
        run: infracost breakdown --path infrastructure/env/${{ matrix.env }} --format json --out-file infracost-${{ matrix.env }}.json || true
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

      - name: Upload Infracost artifact (${{ matrix.env }})
        if: env.INFRACOST_API_KEY != ''
        uses: actions/upload-artifact@v4
        with:
          name: infracost-${{ matrix.env }}
          path: infracost-${{ matrix.env }}.json

  plan-env:
    name: Terraform Plan (${{ matrix.env }})
    runs-on: ubuntu-latest
    env:
      TF_PLUGIN_CACHE_DIR: .terraform.d/plugin-cache
    strategy:
      fail-fast: false
      matrix:
        env: [dev, prod]
    needs: validate
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: .terraform.d/plugin-cache
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform init
        working-directory: infrastructure/env/${{ matrix.env }}
        run: terraform init -input=false -lock=false -backend=false

      - name: Terraform plan (${{ matrix.env }})
        id: plan
        working-directory: infrastructure/env/${{ matrix.env }}
        run: terraform plan -no-color | tee plan_output-${{ matrix.env }}.txt || true

      - name: Comment plan on PR (${{ matrix.env }})
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: plan_output-${{ matrix.env }}.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: always()

      - name: Save plan output (${{ matrix.env }})
        if: always()
        working-directory: infrastructure/env/${{ matrix.env }}
        run: terraform plan -out=plan-${{ matrix.env }}.out -no-color || true

      - name: Upload plan artifact (${{ matrix.env }})
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan-${{ matrix.env }}
          path: infrastructure/env/${{ matrix.env }}/plan-${{ matrix.env }}.out

      - name: Infracost PR comment (${{ matrix.env }})
        if: env.INFRACOST_API_KEY != ''
        uses: infracost/actions/comment@v2
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        with:
          path: infracost-${{ matrix.env }}.json
          behavior: update

  # Optional bootstrap job to create S3 backend resources (disabled by default)
  # Enable by dispatch or manual include of this job; keeps infra idempotent.
  bootstrap-backend:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      STATE_BUCKET: ${{ github.event.inputs.state_bucket }}
      LOCK_TABLE: ${{ github.event.inputs.lock_table }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
          aws-region: us-east-1
      - name: Create backend bucket/table if missing
        run: |
          set -euo pipefail
          BUCKET="${STATE_BUCKET:-CHANGE_ME_STATE_BUCKET}"
          DDB="${LOCK_TABLE:-CHANGE_ME_LOCK_TABLE}"
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Creating state bucket $BUCKET";
            aws s3api create-bucket --bucket "$BUCKET" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1 || true
            aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$BUCKET" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          else
            echo "Bucket $BUCKET exists";
          fi
          if ! aws dynamodb describe-table --table-name "$DDB" >/dev/null 2>&1; then
            echo "Creating lock table $DDB";
            aws dynamodb create-table --table-name "$DDB" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1
            aws dynamodb wait table-exists --table-name "$DDB"
          else
            echo "Lock table $DDB exists";
          fi
